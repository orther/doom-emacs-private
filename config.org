#+TITLE: DOOM Emacs Private Config
#+AUTHOR: Brandon Orther

* Basics
** User Info
#+BEGIN_SRC emacs-lisp
(setq
    user-mail-address "brandon@uptrend.tech"
    user-full-name "Brandon Orther")
#+END_SRC
** Shell
Set shell to bash to protect against problems caused by fish shell
#+BEGIN_SRC emacs-lisp
(setq-default explicit-shell-file-name (executable-find "bash"))
(setq-default shell-file-name (executable-find "bash"))
#+END_SRC

Use coreutils gls (not default osx ls) to prevent "ls does not support --dired;" error
#+BEGIN_SRC emacs-lisp
(let ((gls "/usr/local/bin/gls"))
  (if (file-exists-p gls) (setq insert-directory-program gls)))
#+END_SRC
** UI
*** macOS Native Window Styling
Make titlebar and frame dark
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
(add-to-list 'default-frame-alist '(ns-appearance . dark))
#+END_SRC
*** Fonts
#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "Fira Mono" :size 14)
      ;; doom-variable-pitch-font (font-spec :family "Fira Sans" :size 14)
      ;; doom-unicode-font (font-spec :family "DejaVu Sans Mono" :size 14)
      doom-big-font (font-spec :family "Fira Mono" :size 22))
#+END_SRC
*** Modeline
#+BEGIN_SRC emacs-lisp
(setq +doom-modeline-buffer-file-name-style 'relative-from-project)
#+END_SRC
*** Minibuffer
#+BEGIN_SRC emacs-lisp
(setq show-trailing-whitespace t)
(add-hook! minibuffer-setup (setq-local show-trailing-whitespace nil))
#+END_SRC
* Keybindings
#+BEGIN_SRC emacs-lisp
;; (map!
;;  (:leader
;;    (:prefix "o"
;;      :desc "Agenda" :n "a" #'org-agenda
;;      :desc "eShell" :n "e" #'+eshell/open-popup
;;      :desc "i.org" :n "o" #'emiller/visit-i-org
;;      :desc "APP: Email" :n "m" #'=mail)
;;    (:prefix "p"
;;      :desc "Counsel-ag" :n "f" #'counsel-ag)
;;    (:prefix "g"
;;      :desc "Git Status" :n "g" #'magit-status
;;      :desc "List gists" :n "l" #'+gist:list)
;;    (:prefix "n"
;;      :desc "Org-noter" :n "o" #'org-noter)
;;    (:prefix "p"
;;      :desc "Org-pomodoro" :n "s" #'org-pomodoro)
;;   :desc "New workspace" :n "N" (lambda! () (+workspace/new (read-string "Enter workspace name: ")))))
#+END_SRC
* Functions
Edit i.org
#+BEGIN_SRC emacs-lisp
(defun orther/visit-i-org ()
				(interactive)
				(find-file "~/Dropbox/orgfiles/i.org"))
#+END_SRC
* Feature
** Snippets
Add personal snippets to yasnippet
#+BEGIN_SRC emacs-lisp
(after! yasnippet
  (push "~/.doom.d/snippets" yas-snippet-dirs))
#+END_SRC
* Completion
* UI
* Emacs
* Tools
** Magit
#+BEGIN_SRC emacs-lisp
(after! magit
  (magit-wip-after-save-mode 1)
  (magit-wip-after-apply-mode 1)
  (setq magit-save-repository-buffers 'dontask
        magit-repository-directories '("~/dev/" "~/work/code/"))

  (advice-add 'magit-list-repositories :override #'*magit-list-repositories)
  (set-evil-initial-state! 'magit-repolist-mode 'normal)
  (map! :map magit-repolist-mode-map
        :nmvo doom-leader-key nil
        :map with-editor-mode-map
        (:localleader
          :desc "Finish" :n "," #'with-editor-finish
          :desc "Abort" :n "k" #'with-editor-cancel))

  (setq magit-bury-buffer-function #'+magit/quit
        magit-popup-display-buffer-action nil
        magit-display-file-buffer-function 'switch-to-buffer-other-window)
  (map! :map magit-mode-map
        [remap quit-window] #'+magit/quit
        :n "\\" nil))
#+END_SRC
** Magithub
#+BEGIN_SRC emacs-lisp
(after! magithub
  (setq magithub-clone-default-directory "~/work/code/"))
#+END_SRC
* Languages
** JavaScript
*** Flycheck Jest
#+BEGIN_SRC emacs-lisp
(after! flycheck
  (flycheck-jest-setup)
  (flycheck-add-mode 'jest 'js2-mode))
#+END_SRC
*** Code Coverage Overlays
#+BEGIN_SRC emacs-lisp
(setq coverlay:untested-line-background-color (doom-blend 'red 'bg 0.3)
      coverlay:tested-line-background-color (doom-blend 'green 'bg 0.0))
#+END_SRC
** Org Mode
#+BEGIN_SRC emacs-lisp
(setq +org-dir (expand-file-name "~/work/org"))
#+END_SRC
* Apps
** Write
*** langtool
#+BEGIN_SRC emacs-lisp
(setq langtool-language-tool-jar "/usr/local/Cellar/languagetool/4.1/libexec/languagetool-commandline.jar")
#+END_SRC

# * REFERENCE Config
# ** Languages
# *** Org-mode
# #+BEGIN_SRC emacs-lisp

# #+END_SRC

# Quickly insert a =emacs-lisp= src block
# #+BEGIN_SRC emacs-lisp
# *** ;; (add-to-list 'org-structure-template-alist
# ;;              '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
# #+END_SRC
# Bind capture to =C-c c=
# #+BEGIN_SRC emacs-lisp
# (define-key global-map "\C-cc" 'org-capture)
# #+END_SRC
# Start in insert mode in =org-capture=
# #+BEGIN_SRC emacs-lisp
# (add-hook 'org-capture-mode-hook 'evil-insert-state)
# #+END_SRC
# #+BEGIN_SRC emacs-lisp
# (after! org
#   (setq org-directory "~/Dropbox/orgfiles")

#   (defun org-file-path (filename)
#     "Return the absolute address of an org file, given its relative name."
#     (concat (file-name-as-directory org-directory) filename))
#     (setq org-index-file (org-file-path "i.org"))
#     (setq org-archive-location
#         (concat (org-file-path "archive.org") "::* From %s"))

#     (setq org-agenda-files (list "~/Dropbox/orgfiles/gcal.org"
#                                 "~/Dropbox/orgfiles/i.org"
#                                 "~/Dropbox/orgfiles/Lab_Notebook.org"
#                                 "~/Dropbox/orgfiles/Lab_schedule.org"
#                                 "~/Dropbox/orgfiles/schedule.org"))

#     ;; Set Bullets to OG
#     (setq org-bullets-bullet-list '("■" "◆" "▲" "▶"))
#     (setq org-ellipsis " ▼ ")
#     (setq org-export-with-toc nil)
#     ;; Log when things are done
#     (setq org-log-done 'time)

#   (setq org-capture-templates
#     '(("a" "Appointment" entry
#        (file  "~/Dropbox/orgfiles/gcal.org" "Appointments")
#        "* TODO %?\n:PROPERTIES:\n\n:END:\nDEADLINE: %^T \n %i\n")

#       ("n" "Note" entry
#        (file+headline "~/Dropbox/orgfiles/i.org" "Notes")
#        "** %?\n%T")

#       ("l" "Link" entry
#        (file+headline "~/Dropbox/orgfiles/links.org" "Links")
#        "* %? %^L %^g \n%T" :prepend t)

#       ("t" "To Do Item" entry
#        (file+headline "~/Dropbox/orgfiles/i.org" "Unsorted")
#        "*** TODO %?\n%T" :prepend t)

#       ("j" "Lab Entry" entry
#        (file+olp+datetree "~/Dropbox/orgfiles/Lab_Notebook.org" "Lab Journal")
#        "** %? %^g \n\n")

#       ("d" "Lab To Do" entry
#        (file+headline "~/Dropbox/orgfiles/Lab_Notebook.org" "To Do")
#        "** TODO %?\n%T" :prepend t)

#       ("o" "Work To Do" entry
#        (file+headline "~/Dropbox/orgfiles/o.org" "Unsorted")
#        "** TODO %?\n%T" :prepend t))))
# #+END_SRC
# *** Shell
# Fix Flycheck for shellscripts
# #+BEGIN_SRC emacs-lisp
# ;; (setq flycheck-shellcheck-follow-sources nil)
# #+END_SRC
# ** Modules
# *** Dired all-the-icons
# #+BEGIN_SRC emacs-lisp
# ;; Shows the wrong faces
# ;; (def-package! all-the-icons-dired
# ;;   :hook (dired-mode . all-the-icons-dired-mode))
# #+END_SRC
# *** Docker
# #+BEGIN_SRC emacs-lisp
# (def-package! docker)
# #+END_SRC
# *** Edit-server
# #+BEGIN_SRC emacs-lisp
# (def-package! edit-server
# 		:config
# 				(edit-server-start))
# #+END_SRC
# *** Ivy-yasnippet
# #+BEGIN_SRC emacs-lisp
# (def-package! ivy-yasnippet
#   :commands (ivy-yasnippet)
#   :config
#     (map!
#      (:leader
#        (:prefix "s"
#          :desc "Ivy-yasnippet" :n "y" #'ivy-yasnippet))))
# #+END_SRC
# *** Org-pomodoro
# #+BEGIN_SRC emacs-lisp
# (def-package! org-pomodoro)
# #+END_SRC
# *** Org-noter
# #+BEGIN_SRC emacs-lisp
# (def-package! org-noter
#   :config
#   (map!
#    (:leader
#      (:prefix "n"
#    :desc "Org-noter-insert" :n "i" #'org-noter-insert-note))))
# #+END_SRC
# *** PDF-Tools
# #+BEGIN_SRC emacs-lisp
# (def-package! pdf-tools
#   :preface
#   (setq pdf-view-use-unicode-ligther nil)
#   :config
#   (map! (:map (pdf-view-mode-map)
#           :n doom-leader-key nil))
#   (set! :popup "\\*Outline " '((side . left) (size . 30)) '((quit . t)))
#   (setq-default pdf-view-display-size 'fit-page
#                 pdf-view-midnight-colors `(,(doom-color 'fg) . ,(doom-color 'bg)))
#   ;; turn off cua so copy works
#   (add-hook 'pdf-view-mode-hook
#             (lambda ()
#               (set (make-local-variable 'evil-normal-state-cursor) (list nil)))))
# #+END_SRC

# #+RESULTS:
# : #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (23335 24329 785159 0) :init (23335 24329 785139 0) :init-secs (0 7 258146 0) :use-package-secs (0 7 258190 0) :preface (23335 24329 785150 0) :config (23335 24329 784841 0) :config-secs (0 0 1538 0) :preface-secs (0 7 258172 0)))

# *** Solidity-mode
# #+BEGIN_SRC emacs-lisp
# ;; (set! solidity-solc-path "~/.node_modules/lib/node_modules/solc/solcjs")
# ;; (set! solidity-solium-path "~/.node_modules/lib/node_modules/solium/bin/solium.js")
# #+END_SRC
# *** Wakatime
# #+BEGIN_SRC emacs-lisp
# (setq wakatime-api-key "ef95a313-1eb0-4b87-b170-875f27ac9d25")
# #+END_SRC

