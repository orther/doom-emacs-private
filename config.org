#+TITLE: DOOM Emacs Private Config
#+AUTHOR: Brandon Orther

* Basics
** Files and directory variables
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/Dropbox/org-files/"
      org-brain-path "~/Dropbox/org-files/brain/"
      +org-attach-dir "./attach/"
      +file-templates-dir "~/Dropbox/org-files/templates")

;; Wiki files locations
(defvar +GTD "~/Dropbox/org-files/GTD.org"
  "File where things must be done.")
(defvar +SOMEDAY "~/Dropbox/org-files/SOMEDAY.org"
  "File of things that someday will be done.")
(defvar +MAYBE "~/Dropbox/org-files/MAYBE.org"
  "File of wild possibilities.")
(defvar +JOURNAL "~/Dropbox/org-files/JOURNAL.org"
  "File where things are logged.")
(defvar +BOOKMARKS "~/Dropbox/org-files/BOOKMARKS.org"
  "Jungle of links.")
(defvar +private-wiki "~/Dropbox/org-files/private-wiki.org"
  "File where my private wiki is.")
(defvar +work-wiki "~/Dropbox/org-files/work-wiki.org"
  "File where my work wiki is.")
(defvar +environment-wiki "~/Dropbox/org-files/environment-wiki.org"
  "File where my environment wiki is.")
(defvar +education-wiki "~/Dropbox/org-files/education-wiki.org"
  "File where my education wiki is.")
(defvar +build-wiki "~/Dropbox/org-files/build-wiki.org"
  "File where my build wiki is.")
#+END_SRC
** User Credentials
#+BEGIN_SRC emacs-lisp
(setq
    user-mail-address "brandon@uptrend.tech"
    user-full-name "Brandon Orther")
(setq auth-sources '("~/.authinfo.gpg"))
#+END_SRC
** Shell
Set shell to bash to protect against problems caused by fish shell
#+BEGIN_SRC emacs-lisp
(setq-default explicit-shell-file-name (executable-find "bash"))
(setq-default shell-file-name (executable-find "bash"))
#+END_SRC

Use coreutils gls (not default osx ls) to prevent "ls does not support --dired;" error
#+BEGIN_SRC emacs-lisp
(let ((gls "/usr/local/bin/gls"))
  (if (file-exists-p gls) (setq insert-directory-program gls)))
#+END_SRC
** UI
*** macOS Native Window Styling
#+BEGIN_SRC emacs-lisp
;; Make titlebar and frame dark
(add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
(add-to-list 'default-frame-alist '(ns-appearance . dark))

;; Remove scroll bars
(add-to-list 'default-frame-alist
             '(vertical-scroll-bars . nil))
#+END_SRC
*** Start maximized
#+BEGIN_SRC emacs-lisp
;; start me maximized
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC
*** Fonts
#+BEGIN_SRC emacs-lisp
(setq ns-use-thin-smoothing t)
(setq doom-font (font-spec :family "Fira Mono" :size 14)
      doom-big-font (font-spec :family "Fira Mono" :size 22))
#+END_SRC
*** Modeline
#+BEGIN_SRC emacs-lisp
(setq +doom-modeline-buffer-file-name-style 'relative-from-project)
#+END_SRC
*** Minibuffer
#+BEGIN_SRC emacs-lisp
(setq show-trailing-whitespace t)
(add-hook! minibuffer-setup (setq-local show-trailing-whitespace nil))
#+END_SRC
*** Icons
**** Ivy Icons
#+BEGIN_SRC emacs-lisp
(def-package! all-the-icons-ivy
  :after (ivy counsel)
  :init
  (setq all-the-icons-ivy-file-commands
        '(counsel-recentf
          counsel-find-file
          counsel-file-jump
          counsel-dired-jump
          counsel-projectile-find-file ;; not working
          counsel-projectile-find-dir))
  (setq all-the-icons-ivy-buffer-commands
        '(+ivy/switch-workspace-buffer))
  :config (all-the-icons-ivy-setup))
#+END_SRC
** Def Packages
#+BEGIN_SRC emacs-lisp
(def-package! highlight-blocks
  :commands (highlight-blocks-mode highlight-blocks-now))

(def-package! link-hint)

;; (def-package! plain-org-wiki
;;   :config
;;   (setq pow-directory "~/Dropbox/org-files/brain"))
#+END_SRC
* Keybindings
#+BEGIN_SRC emacs-lisp
;; (map!
;;  (:leader
;;    (:prefix "o"
;;      :desc "Agenda" :n "a" #'org-agenda
;;      :desc "eShell" :n "e" #'+eshell/open-popup
;;      :desc "i.org" :n "o" #'emiller/visit-i-org
;;      :desc "APP: Email" :n "m" #'=mail)
;;    (:prefix "p"
;;      :desc "Counsel-ag" :n "f" #'counsel-ag)
;;    (:prefix "g"
;;      :desc "Git Status" :n "g" #'magit-status
;;      :desc "List gists" :n "l" #'+gist:list)
;;    (:prefix "n"
;;      :desc "Org-noter" :n "o" #'org-noter)
;;    (:prefix "p"
;;      :desc "Org-pomodoro" :n "s" #'org-pomodoro)
;;   :desc "New workspace" :n "N" (lambda! () (+workspace/new (read-string "Enter workspace name: ")))))
#+END_SRC
* Functions
Edit i.org
#+BEGIN_SRC emacs-lisp
;; (defun orther/visit-i-org ()
;; 				(interactive)
;; 				(find-file "~/Dropbox/orgfiles/i.org"))
#+END_SRC
** AloisJanicek's Autoload
*** Helpers
#+BEGIN_SRC emacs-lisp
;; ;;;###autoload
;; (defun transform-square-brackets-to-round-ones(string-to-transform)
;;   "Transforms [ into ( and ] into ), other chars left unchanged."
;;   (concat
;;    (mapcar #'(lambda (c) (if (equal c ?\[) ?\( (if (equal c ?\]) ?\) c))) string-to-transform)))
;; ;;;###autoload
;; (defun my-yank-org-link (text)
;;   (string-match org-bracket-link-regexp text)
;;   (insert (substring text (match-beginning 1) (match-end 1))))
;; ;;;###autoload
;; (defun counsel-org-goto-open-org-link (x)
;;   "Open selected link"
;;   (org-goto-marker-or-bmk (cdr x))
;;   (org-open-at-point)
;;   (bury-buffer)
;;   ;; (kill-buffer)
;;   )
;; ;;;###autoload
;; (defun counsel-org-goto-wiki-action (x)
;;   "Go to headline in candidate X."
;;   (org-goto-marker-or-bmk (cdr x))
;;   (outline-show-branches)
;;   ;; (forward-line 1)
;;   ;; (org-cycle)
;;   ;; (forward-line -1)
;;   (org-narrow-to-subtree))
;; ;;;###autoload
;; (defun org-summary-todo (n-done n-not-done)
;;   "Switch entry to DONE when all subentries are done, to TODO otherwise."
;;   (let (org-log-done org-log-states)   ; turn off logging
;;     (org-todo (if (= n-not-done 0) "DONE" "TODO"))))
;; ;;;###autoload
;; (defun aj/org-refile-to-file-as-top-level (filename)
;;   "Move current headline as a top level headline at top of specified file
;; https://www.reddit.com/r/emacs/comments/74i8sy/how_to_copy_an_org_item_to_a_specific_headerfile/
;; "
;;   (let ((pos (save-excursion
;;                (find-file filename)
;;                (goto-char (point-min))
;;                (forward-line))))
;;     (org-refile nil nil (list nil filename nil pos)))
;;   (switch-to-buffer (current-buffer)))
;; ;;;###autoload
;; (defun my/refile (file headline &optional arg)
;;   "Refile to a specific location.
;; With a 'C-u' ARG argument, we jump to that location (see
;; `org-refile').
;; Use `org-agenda-refile' in `org-agenda' mode."
;;   (let* ((pos (with-current-buffer (or (get-buffer file)	;Is the file open in a buffer already?
;;                                        (find-file-noselect file)) ;Otherwise, try to find the file by name (Note, default-directory matters here if it isn't absolute)
;;                 (or (org-find-exact-headline-in-buffer headline)
;;                     (error "Can't find headline `%s'" headline))))
;;          (filepath (buffer-file-name (marker-buffer pos)));If we're given a relative name, find absolute path
;;          (rfloc (list headline filepath nil pos)))
;;     (if (and (eq major-mode 'org-agenda-mode) (not (and arg (listp arg)))) ;Don't use org-agenda-refile if we're just jumping
;;         (org-agenda-refile nil rfloc)
;;       (org-refile arg nil rfloc))))
;; ;;;###autoload
;; (defun my-org-agenda-skip-all-siblings-but-first ()
;;   "Skip all but the first non-done entry."
;;   (let (should-skip-entry)
;;     (unless (org-current-is-todo)
;;       (setq should-skip-entry t))
;;     (save-excursion
;;       (while (and (not should-skip-entry) (org-goto-sibling t))
;;         (when (org-current-is-todo)
;;           (setq should-skip-entry t))))
;;     (when should-skip-entry
;;       (or (outline-next-heading)
;;           (goto-char (point-max))))))
;; ;;;###autoload
;; (defun org-current-is-todo ()
;;   (string= "TODO" (org-get-todo-state)))
;; ;;;###autoload
;; (defun opened-org-agenda-files ()
;;   ;; (let ((files (org-agenda-files)))
;;   (let ((files (org-projectile-todo-files)))
;;     (setq opened-org-agenda-files nil)
;;     (mapcar
;;      (lambda (x)
;;        (when (get-file-buffer x)
;;          (push x opened-org-agenda-files)))
;;      files)))
;; ;;;###autoload
;; (defun kill-org-agenda-files ()
;;   ;; (let ((files (org-agenda-files)))
;;   (let ((files (org-projectile-todo-files)))
;;     (mapcar
;;      (lambda (x)
;;        (when
;;            (and
;;             (get-file-buffer x)
;;             (not (member x opened-org-agenda-files)))
;;          (kill-buffer (get-file-buffer x))))
;;      files)))
;;;###autoload
;; (defun aj/return-short-project-name ()
;;   "Returns short project name - based on projectile"
;;   (format "Project: %s"
;;           (replace-regexp-in-string "/proj/\\(.*?\\)/.*"
;;                                     "\\1"
;;                                     (projectile-project-name))))
;; ;;;###autoload
;; (defun message-off-advice (oldfun &rest args)
;;   "Quiet down messages in adviced OLDFUN."
;;   (let ((message-off (make-symbol "message-off")))
;;     (unwind-protect
;;         (progn
;;           (advice-add #'message :around #'ignore (list 'name message-off))
;;           (apply oldfun args))
;;       (advice-remove #'message message-off))))
;; ;;;###autoload
;; (defun aj/remap-keys-for-org-agenda ()
;;   "Remap keys for org-agenda, call it before opening org agenda"
;;   (evil-define-key 'motion org-agenda-mode-map
;;     "j" 'org-agenda-next-item
;;     "k" 'org-agenda-previous-item
;;     "z" 'org-agenda-view-mode-dispatch
;;     "h" 'aj/agenda-hydra/body
;;     "\C-h" 'evil-window-left
;;     ))
;; ;;;###autoload
;; (defun aj/indent-if-not-webmode ()
;;   (if (equal 'web-mode major-mode) nil
;;     (newline-and-indent)))
;; ;;;###autoload
;; (defun er/add-web-mode-expansions ()
;;   (require 'html-mode-expansions)
;;   (make-variable-buffer-local 'er/try-expand-list)
;;   (setq er/try-expand-list (append
;;                             er/try-expand-list
;;                             '(
;;                               web-mode-mark-and-expand
;;                               er/mark-html-attribute
;;                               er/mark-inner-tag
;;                               er/mark-outer-tag
;;                               ))))
;; ;;;###autoload
;; (defun aj/remap-emmet (&optional beg end)
;;   "remaps keys for emmet-preview-keymap"
;;   (map!
;;    :map emmet-preview-keymap
;;    "M-r" #'emmet-preview-accept))
;; ;;;###autoload
;; (defun aj/set-info-popup-width (&optional asdf asds)
;;   "Set width of info popup buffer"
;;   (if doom-big-font-mode
;;       (set-popup-rule! "*info*"                         :size 0.6 :side 'left :select t :transient nil)
;;     (set-popup-rule! "*info*"                         :size 0.4 :side 'left :select t :transient nil)
;;     ))
;; ;;;###autoload
;; (defun my-web-mode-hook ()
;;   "Hooks for Web mode."
;;   (setq web-mode-markup-indent-offset 2
;;         web-mode-css-indent-offset 2
;;         web-mode-code-indent-offset 2
;;         web-mode-attr-indent-offset 2
;;         css-indent-offset 2
;;         )
;;   )
;; ;;;###autoload
;; (defun aj/insert-link-in-org()
;;   (interactive)
;;   (org-insert-link)
;;   ;; (evil-org-open-below 1)
;;   )
;; ;;;###autoload
;; (defun josh/org-capture-refile-but-with-args (file headline &optional arg)
;;   "Copied from `org-capture-refile' since it doesn't allow passing arguments. This does."
;;   (unless (eq (org-capture-get :type 'local) 'entry)
;;     (error
;;      "Refiling from a capture buffer makes only sense for `entry'-type templates"))
;;   (let ((pos (point))
;;         (base (buffer-base-buffer (current-buffer)))
;;         (org-capture-is-refiling t)
;;         (kill-buffer (org-capture-get :kill-buffer 'local)))
;;     (org-capture-put :kill-buffer nil)
;;     (org-capture-finalize)
;;     (save-window-excursion
;;       (with-current-buffer (or base (current-buffer))
;;         (org-with-wide-buffer
;;          (goto-char pos)
;;          (my/refile file headline arg))))
;;     (when kill-buffer (kill-buffer base))))
;;;###autoload
;; (defun aj/my-org-faces ()
;;   "set org faces how I like them"
;;   (set-face-attribute     'org-level-1 nil                :height 1.0 :background nil)
;;   (set-face-attribute     'org-level-2 nil                :height 1.0)
;;   (set-face-attribute     'org-level-3 nil                :height 1.0)
;;   (set-face-attribute     'org-level-4 nil                :height 1.0)
;;   (set-face-attribute     'org-agenda-date nil            :height 1.0)
;;   (set-face-attribute     'org-agenda-date-today    nil   :height 1.0)
;;   (set-face-attribute     'org-agenda-date-weekend  nil   :height 1.0)
;;   (set-face-attribute     'org-agenda-structure     nil   :height 1.0)
;;   (setq org-fontify-whole-heading-line nil)
;;   )
;; ;;;###autoload
;; (defun aj/projectile-add-known-project-and-save (project-root)
;;   "Add PROJECT-ROOT to the list of known projects and save it to the list of known projects."
;;   (interactive (list (read-directory-name "Add to known projects: ")))
;;   (unless (projectile-ignored-project-p project-root)
;;     (setq projectile-known-projects
;;           (delete-dups
;;            (cons (file-name-as-directory (abbreviate-file-name project-root))
;;                  projectile-known-projects))))
;;   (projectile-save-known-projects))
#+END_SRC
*** Interactive
#+BEGIN_SRC emacs-lisp
;; ;;;###autoload
;; (defun aj/goto-journal ()
;;   (interactive)
;;   (persp-remove-buffer "JOURNAL.org")
;;   (if (get-buffer "JOURNAL.org")
;;       (progn
;;         (pop-to-buffer "JOURNAL.org")
;;         (emacs-lock-mode 'kill))
;;     (progn
;;       (pop-to-buffer (find-file-noselect +JOURNAL))
;;       (emacs-lock-mode 'kill)
;;       (turn-off-solaire-mode))))
;; ;;;###autoload
;; (defun aj/goto-someday ()
;;   (interactive)
;;   (persp-remove-buffer "SOMEDAY.org")
;;   (if (get-buffer "SOMEDAY.org")
;;       (progn
;;         (pop-to-buffer "SOMEDAY.org")
;;         (emacs-lock-mode 'kill)
;;         (widen)
;;         (goto-char (point-min))
;;         (forward-line 3)
;;         (outline-show-branches)
;;         )
;;     (progn
;;       (pop-to-buffer (find-file-noselect +SOMEDAY))
;;       (emacs-lock-mode 'kill)
;;       (turn-off-solaire-mode)
;;       (widen)
;;       (goto-char (point-min))
;;       (forward-line 3)
;;       (outline-show-branches)
;;       )))
;; ;;;###autoload
;; (defun aj/goto-maybe ()
;;   (interactive)
;;   (persp-remove-buffer "MAYBE.org")
;;   (if (get-buffer "MAYBE.org")
;;       (progn
;;         (pop-to-buffer "MAYBE.org")
;;         (emacs-lock-mode 'kill)
;;         (widen)
;;         (goto-char (point-min))
;;         (forward-line 3)
;;         )
;;     (progn
;;       (pop-to-buffer (find-file-noselect +MAYBE))
;;       (emacs-lock-mode 'kill)
;;       (turn-off-solaire-mode)
;;       (widen)
;;       (goto-char (point-min))
;;       (forward-line 3)
;;       )))
;; ;;;###autoload
;; (defun aj/goto-GTD ()
;;   (interactive)
;;   (persp-remove-buffer "GTD.org")
;;   (if (get-buffer "GTD.org")
;;       (progn
;;         (pop-to-buffer "GTD.org")
;;         (emacs-lock-mode 'kill)
;;         (widen)
;;         (goto-char (point-min))
;;         (forward-line 6)
;;         )
;;     (progn
;;       (pop-to-buffer (find-file-noselect +GTD))
;;       (emacs-lock-mode 'kill)
;;       (widen)
;;       (goto-char (point-min))
;;       (forward-line 6)
;;       (turn-off-solaire-mode))))
;; ;;;###autoload
;; (defun aj/goto-bookmarks ()
;;   "Selects and opens links"
;;   (interactive)
;;   (persp-remove-buffer "BOOKMARKS.org")
;;   (if (get-buffer +BOOKMARKS)
;;       (progn
;;         (pop-to-buffer "BOOKMARKS.org")
;;         (emacs-lock-mode 'kill)
;;         (widen)
;;         (counsel-org-goto-bookmarks))
;;     (progn
;;       (pop-to-buffer (find-file-noselect +BOOKMARKS))
;;       (emacs-lock-mode 'kill)
;;       (turn-off-solaire-mode)
;;       (widen)
;;       (counsel-org-goto-bookmarks))))
;; ;;;###autoload
;; (defun aj/goto-private-wiki ()
;;   "Go to my private wiki and browse it"
;;   (interactive)
;;   (persp-remove-buffer "private-wiki.org")
;;   (require 'counsel)
;;   (if (get-buffer "private-wiki.org")
;;       (progn
;;         (pop-to-buffer "private-wiki.org")
;;         (emacs-lock-mode 'kill)
;;         (aj/wiki-select/body))
;;     (progn
;;       (pop-to-buffer (find-file-noselect +private-wiki))
;;       (emacs-lock-mode 'kill)
;;       (turn-off-solaire-mode)
;;       (counsel-org-goto-private-wiki))))
;; ;;;###autoload
;; (defun aj/goto-environment-wiki ()
;;   "Go to my environment wiki and browse it"
;;   (interactive)
;;   (persp-remove-buffer "environment-wiki.org")
;;   (require 'counsel)
;;   (if (get-buffer "environment-wiki.org")
;;       (progn
;;         (pop-to-buffer "environment-wiki.org")
;;         (emacs-lock-mode 'kill)
;;         (goto-char (point-min))
;;         (forward-line 8)
;;         (aj/wiki-select/body))
;;     (progn
;;       (pop-to-buffer (find-file-noselect +environment-wiki))
;;       (emacs-lock-mode 'kill)
;;       (turn-off-solaire-mode)
;;       (counsel-org-goto-private-wiki))))
;; ;;;###autoload
;; (defun aj/goto-education-wiki ()
;;   "Go to my environment wiki and browse it"
;;   (interactive)
;;   (persp-remove-buffer "education-wiki.org")
;;   (require 'counsel)
;;   (if (get-buffer "education-wiki.org")
;;       (progn
;;         (pop-to-buffer "education-wiki.org")
;;         (emacs-lock-mode 'kill)
;;         (aj/wiki-select/body))
;;     (progn
;;       (pop-to-buffer (find-file-noselect +education-wiki))
;;       (emacs-lock-mode 'kill)
;;       (turn-off-solaire-mode)
;;       (counsel-org-goto-private-wiki))))
;; ;;;###autoload
;; (defun aj/goto-work-wiki ()
;;   "Go to my work wiki and browse it,narrow it"
;;   (interactive)
;;   (persp-remove-buffer "work-wiki.org")
;;   (require 'counsel)
;;   (if (get-buffer "work-wiki.org")
;;       (progn
;;         (pop-to-buffer "work-wiki.org")
;;         (goto-char (point-min))
;;         (emacs-lock-mode 'kill)
;;         (goto-char (point-min))
;;         (forward-line 6)
;;         (aj/wiki-select/body))
;;     (progn
;;       (pop-to-buffer (find-file-noselect +work-wiki))
;;       (emacs-lock-mode 'kill)
;;       (turn-off-solaire-mode)
;;       (counsel-org-goto-private-wiki))))
;; ;;;###autoload
;; (defun aj/goto-build-wiki ()
;;   "Go to my work wiki and browse it,narrow it"
;;   (interactive)
;;   (persp-remove-buffer "build-wiki.org")
;;   (require 'counsel)
;;   (if (get-buffer "build-wiki.org")
;;       (progn
;;         (pop-to-buffer "build-wiki.org")
;;         (emacs-lock-mode 'kill)
;;         (aj/wiki-select/body))
;;     (progn
;;       (pop-to-buffer (find-file-noselect +build-wiki))
;;       (emacs-lock-mode 'kill)
;;       (turn-off-solaire-mode)
;;       (counsel-org-goto-private-wiki))))
;; ;;;###autoload
;; (defun aj-strike-through-org-headline ()
;;   "Strikes through headline in org mode.
;; Searches for beginning of text segment of a headline under the point, inserts \"+\",
;; then tests if headlines has tags and inserts another \"+\" sign at the end
;; of text segment of current headline.
;; "
;;   (interactive)
;;   (save-excursion
;;     (goto-char (search-backward "\*"))
;;     (evil-forward-WORD-begin)
;;     (insert "+")
;;     (if (equal (org-get-tags-string) "")
;;         (progn
;;           (end-of-line)
;;           (insert "+")
;;           (save-buffer))
;;       (progn
;;         (search-forward ":")
;;         (backward-char 2)
;;         (insert "+")
;;         (save-buffer))
;;       )))
;; ;;;###autoload
;; (defun aj/org-agenda-current-file ()
;;   "Show org agenda list for current file only"
;;   (interactive)
;;   (let ((org-agenda-files (list (buffer-file-name))))
;;     (org-agenda-list)))
;; ;;;###autoload
;; (defun obsoke/ediff-dotfile-and-template ()
;;   "ediff the current `dotfile' with the template"
;;   (interactive)
;;   (ediff-files
;;    "~/.doom.d/init.el"
;;    "~/.emacs.d/init.example.el"))
;; ;;;###autoload
;; (defun my-org-retrieve-url-from-point-for-ivy (x)
;;   (interactive)
;;   (with-ivy-window
;;     (org-goto-marker-or-bmk (cdr x))
;;     (forward-char 4)
;;     (let* ((link-info (assoc :link (org-context)))
;;            (text (when link-info
;;                    ;; org-context seems to return nil if the current element
;;                    ;; starts at buffer-start or ends at buffer-end
;;                    (buffer-substring-no-properties (or (cadr link-info) (point-min))
;;                                                    (or (caddr link-info) (point-max)))))
;;            (my-buffer (buffer-name)))
;;       (if (not text)
;;           (error "Not in org link")
;;         (add-text-properties 0 (length text) '(yank-handler (my-yank-org-link)) text)
;;         (kill-new text)
;;         (kill-buffer my-buffer)
;;         ))))
;; ;;;###autoload
;; (defun my-org-retrieve-url-from-point (&optional x)
;;   (interactive)
;;   (let* ((link-info (assoc :link (org-context)))
;;          (text (when link-info
;;                  ;; org-context seems to return nil if the current element
;;                  ;; starts at buffer-start or ends at buffer-end
;;                  (buffer-substring-no-properties (or (cadr link-info) (point-min))
;;                                                  (or (caddr link-info) (point-max))))))
;;     (if (not text)
;;         (error "Not in org link")
;;       (add-text-properties 0 (length text) '(yank-handler (my-yank-org-link)) text)
;; 
;;       (kill-new text))))
;; ;;;###autoload
;; (defun my-smarter-kill-ring-save ()
;;   (interactive)
;;   (if (region-active-p)
;;       (call-interactively #'kill-ring-save)
;;     (when (eq major-mode 'org-mode)
;;       (call-interactively #'my-org-retrieve-url-from-point))))
;; ;;;###autoload
;; (defun counsel-org-goto-bookmarks ()
;;   "Browse my bookmarks"
;;   (interactive)
;;   (ivy-read "Goto: " (counsel-org-goto--get-headlines)
;;             :history 'counsel-org-goto-history
;;             ;; :action 'aj/create-new-org-l1-heading
;;             :action 'counsel-org-goto-open-org-link
;;             :caller 'counsel-org-goto))
;; ;;;###autoload
;; (defun aj/create-new-org-l1-heading (x)
;;   "Creates new top level heading in current org file from which ivy was called"
;;   (interactive)
;;   (with-ivy-window
;;     (goto-char (point-min))
;;     (org-insert-heading-respect-content)
;;     (insert x)
;;     (org-id-get-create)
;;     (goto-char (point-min))
;;     (forward-line 1)
;;     (org-cycle)
;;     (evil-open-below 1)))
;; ;;;###autoload
;; (defun counsel-org-goto-private-wiki ()
;;   "Go to a different location in my private wiki file."
;;   (interactive)
;;   (let ((ivy-height 40)
;;         (ivy-posframe-font (font-spec :family "Iosevka" :size 18))
;;         (ivy-posframe-parameters `((min-width . 120)
;;                                    (height . 30)
;;                                    (min-height . ,ivy-height)
;;                                    (internal-border-width . 20))))
;;     (ivy-read "Goto: " (counsel-org-goto--get-headlines)
;;               :history 'counsel-org-goto-history
;;               ;; :action 'aj/create-new-org-l1-heading
;;               :action 'counsel-org-goto-wiki-action
;;               :caller 'counsel-org-goto))
;;   )
;; 
;; ;;;###autoload
;; (defun aj/refile-to-file-headline (file headline &optional arg)
;;   "Refile to HEADLINE in FILE. Clean up org-capture if it's activated.
;; 
;; With a `C-u` ARG, just jump to the headline."
;;   (interactive "P")
;;   (let ((is-capturing (and (boundp 'org-capture-mode) org-capture-mode)))
;;     (cond
;;      ((and arg (listp arg))	    ;Are we jumping?
;;       (my/refile file headline arg))
;;      ;; Are we in org-capture-mode?
;;      (is-capturing      	;Minor mode variable that's defined when capturing
;;       (josh/org-capture-refile-but-with-args file headline arg))
;;      (t
;;       (my/refile file headline arg)))
;;     (when (or arg is-capturing)
;;       (setq hydra-deactivate t))))
;; ;;;###autoload
;; (defun my/org-pomodoro-text-time ()
;;   "Return status info about org-pomodoro and if org-pomodoro is not running, try to print info about org-clock.
;; If either org-pomodoro or org-clock aren't active, print \"No Active Task \" "
;;   (interactive)
;;   (if (featurep 'org-pomodoro)
;;       (cond ((equal :none org-pomodoro-state)
;;              (if (org-clock-is-active)
;;                  (format "Clocked task: %d minutes - %s"
;;                          (org-clock-get-clocked-time) (substring-no-properties org-clock-heading))
;;                "No Active task"))
;;             ((equal :pomodoro org-pomodoro-state)
;;              (format "%d - Pomodoro: %d minutes - %s"
;;                      org-pomodoro-count (/ (org-pomodoro-remaining-seconds) 60) (substring-no-properties org-clock-heading)))
;;             ((equal :short-break org-pomodoro-state) "Short Break")
;;             ((equal :long-break org-pomodoro-state) "Long Break"))))
;; ;;;###autoload
;; (defun aj/update-org-clock-heading ()
;;   "Updates org-clock-heading"
;;   (interactive)
;;   (save-excursion
;;     (org-clock-goto)
;;     (setq org-clock-heading
;;           (cond ((and org-clock-heading-function
;;                       (functionp org-clock-heading-function))
;;                  (funcall org-clock-heading-function))
;; 
;;                 ((nth 4 (org-heading-components))
;;                  (replace-regexp-in-string
;;                   "\\[\\[.*?\\]\\[\\(.*?\\)\\]\\]" "\\1"
;;                   (match-string-no-properties 4)))
;;                 (t "???")))
;;     (bury-buffer)))
;;;###autoload
;; (defun aj/return-project-org-file ()
;;   "Returns project org file"
;;   (interactive)
;;   (list (concat (projectile-project-root) "README.org")))
;; ;;;###autoload
;; (defun aj/return-plain-string-project-org-file ()
;;   "Returns project org file"
;;   (interactive)
;;   (concat (projectile-project-root) "README.org"))
;; ;;;###autoload
;; (defun aj/find-and-open-org-projectile-file ()
;;   "Find and open org-projectile file"
;;   (interactive)
;;   (find-file (concat (projectile-project-root) "README.org"))
;;   (goto-char (org-find-exact-headline-in-buffer "TASKS"))
;;   )
;; ;;;###autoload
;; (defun aj/goto-current-org-projectile-file ()
;;   "Go to the current org-projectile-file"
;;   (interactive)
;;   (save-excursion
;;     (find-file (concat (projectile-project-root) "README.org"))
;;     (counsel-org-goto)))
;; ;;;###autoload
;; (defun aj/org-projectile-capture-for-current-project ()
;;   "Call standard capture template for current org-projectile file"
;;   (interactive)
;;   (org-capture nil "h")
;;   )
;; ;;;###autoload
;; (defun aj/org-brain-per-project ()
;;   "Opens org-brain-visualize for current projectile project."
;;   (interactive)
;;   (let ((org-brain-path (projectile-project-root)))
;;     (org-brain-visualize (aj/return-plain-string-project-org-file))))
;; ;;;###autoload
;; (defun my/org-brain-goto (&optional entry goto-file-func)
;;   "Goto buffer and position of org-brain ENTRY.
;; If ENTRY isn't specified, ask for the ENTRY.
;; Unless GOTO-FILE-FUNC is nil, use `pop-to-buffer-same-window' for opening the entry."
;;   (interactive)
;;   (require 'org-brain)
;;   (org-brain-stop-wandering)
;;   (unless entry (setq entry (org-brain-choose-entry
;;                              "Entry: "
;;                              (append (org-brain-files t)
;;                                      (org-brain-headline-entries))
;;                              nil t)))
;;   (let ((marker (org-brain-entry-marker entry)))
;;     (apply (or goto-file-func #'pop-to-buffer-same-window)
;;            (list (marker-buffer marker)))
;;     (widen)
;;     (org-set-visibility-according-to-property)
;;     (goto-char (marker-position marker))
;;     ;; (org-show-entry)
;;     (outline-show-branches)
;;     (org-narrow-to-subtree)
;;     )
;;   entry)
;; ;;;###autoload
;; (defun my/org-brain-goto-current (&optional same-window)
;;   "Use `org-brain-goto' on `org-brain-entry-at-pt', in other window..
;; If run with `\\[universal-argument]', or SAME-WINDOW as t, use current window."
;;   (interactive "P")
;;   (require 'org-brain)
;;   (if same-window
;;       (my/org-brain-goto (org-brain-entry-at-pt))
;;     (my/org-brain-goto (org-brain-entry-at-pt) #'pop-to-buffer)))
;; ;;;###autoload
;; (defun aj/org-brain-visualize-entry-at-pt ()
;;   "Helper function for direct visualizing of entry at point"
;;   (interactive)
;;   (require 'org-brain)
;;   (progn
;;     (org-brain-visualize (org-brain-entry-at-pt))))
;; ;;;###autoload
;; ;; (defun pack-info-add-directories ()
;; ;;   (interactive)
;; ;;   (require 'info)
;; ;;   (require 'f)
;; ;;   (require 'dash)
;; ;;   (let ((old-info-dirs Info-additional-directory-list))
;; ;;     (setq Info-additional-directory-list nil)
;; ;;     (setq Info-additional-directory-list
;; ;;           (-concat
;; ;;            (--filter (file-exists-p (expand-file-name "dir" it))
;; ;;                      (f-directories package-user-dir))
;; ;;            old-info-dirs))))
;; ;;;###autoload
;; (defun aj/clock-menu ()
;;   "Present recent clocked tasks"
;;   (interactive)
;;   (setq current-prefix-arg '(4))
;;   (call-interactively 'org-clock-in-last))
;; ;;;###autoload
;; (defun aj/better-open-current-projectile-org-file ()
;;   "Opens current project org file as popup buffer to quickly peak into"
;;   (interactive)
;;   (let ((my-buffer (concat (projectile-project-name) "/README.org")))
;;     (if (get-file-buffer my-buffer)
;;         (pop-to-buffer my-buffer)
;;       (pop-to-buffer (find-file-noselect (concat (projectile-project-root) "README.org"))))))
;; ;;;###autoload
;; (defun aj/project ()
;;   (interactive)
;;   "Shows project agenda"
;;   (progn
;;     (projectile-project-root)
;;     (projectile-project-name)
;;     (org-agenda nil "C"))
;;   )
;; ;;;###autoload
;; (defun aj-mpdel-playlist-open (&optional playlist)
;;   "Open a buffer to popup with PLAYLIST, current playlist if nil."
;;   (interactive)
;;   (let* ((playlist (or playlist (libmpdel-current-playlist)))
;;          (buffer (mpdel-playlist--buffer playlist)))
;;     (with-current-buffer buffer
;;       (mpdel-playlist-mode)
;;       (setq mpdel-playlist-playlist playlist)
;;       (mpdel-playlist-refresh buffer))
;;     (pop-to-buffer buffer)
;;     (mpdel-playlist--register-to-hooks buffer)))
;; ;;;###autoload
;; (defun aj/toggle-doom-theme ()
;;   "Toggle between light and dark theme"
;;   (interactive)
;;   (if (equal 'doom-one doom-theme)
;;       (progn
;;         (setq doom-theme 'doom-solarized-light)
;;         (doom/reload-theme))
;;     (progn
;;       (setq doom-theme 'doom-one)
;;       (doom/reload-theme))))
;; ;;;###autoload
;; (defun aj/my-swiper ()
;;   "Launch swiper with different ivi-height (12)"
;;   (interactive)
;;   (let ((ivy-height 15))
;;     (counsel-grep-or-swiper)))
;; ;;;###autoload
;; (defun aj/mark-region-and-preview-emmet ()
;;   "Marks whole line before current point possition and starts emmet-preview for marked region"
;;   (interactive)
;;   (let ((end (point))
;;         (beg (progn
;;                (evil-first-non-blank)
;;                (point))))
;;     (evil-last-non-blank)
;;     (forward-char)
;;     (emmet-preview beg end)))
;; ;;;###autoload
;; (defun aj/set-term-keys ()
;;   (interactive)
;;   (evil-define-key 'insert term-raw-map
;;     (kbd "C-h") 'evil-window-left
;;     (kbd "C-j") 'evil-window-down
;;     (kbd "C-k") 'evil-window-up
;;     (kbd "C-<right>") 'next-buffer
;;     (kbd "C-<left>") 'previous-buffer
;;     (kbd "M-1") (function
;;                  (lambda nil
;;                    (interactive)
;;                    (+workspace/switch-to 0)))
;;     (kbd "M-2") (function
;;                  (lambda nil
;;                    (interactive)
;;                    (+workspace/switch-to 1)))
;;     (kbd "M-3") (function
;;                  (lambda nil
;;                    (interactive)
;;                    (+workspace/switch-to 2)))
;;     (kbd "M-4") (function
;;                  (lambda nil
;;                    (interactive)
;;                    (+workspace/switch-to 3)))
;;     (kbd "M-5") (function
;;                  (lambda nil
;;                    (interactive)
;;                    (+workspace/switch-to 4)))
;;     (kbd "M-6") (function
;;                  (lambda nil
;;                    (interactive)
;;                    (+workspace/switch-to 5)))
;;     (kbd "M-7") (function
;;                  (lambda nil
;;                    (interactive)
;;                    (+workspace/switch-to 6)))
;;     (kbd "M-8") (function
;;                  (lambda nil
;;                    (interactive)
;;                    (+workspace/switch-to 7)))
;;     (kbd "M-0") (function
;;                  (lambda nil
;;                    (interactive)
;;                    (+workspace/switch-to-last)))
;;     (kbd "M-t") (function
;;                  (lambda nil
;;                    (interactive)
;;                    (+workspace/new)))
;;     ;; (kbd "C-l") 'evil-window-right
;;     )
;;   )
;; ;;;###autoload
;; (defun aj/insert-link-into-org-heading ()
;;   "Marks current heading text and then inserts link"
;;   (interactive)
;;   (progn
;;     (end-of-line)
;;     (set-mark (point))
;;     (search-backward "*")
;;     (forward-char)
;;     (forward-char)
;;     (org-insert-link)
;;     )
;;   )
;; ;;;###autoload
;; (defun aj/insert-link-into-org-list-item ()
;;   "Marks current list item text and then inserts link"
;;   (interactive)
;;   (progn
;;     (end-of-line)
;;     (set-mark (point))
;;     (search-backward "-")
;;     (forward-char)
;;     (forward-char)
;;     (org-insert-link)
;;     )
;;   )
;; ;;;###autoload
;; (defun aj/save-session-as ()
;;   "Save current session and ask for the name, because you calling it with C-U prefix"
;;   (interactive)
;;   (setq current-prefix-arg '(4)) ; C-u
;;   (call-interactively '+workspace/save-session))
;; ;;;###autoload
;; (defun beautify-html-file-and-revert ()
;;   "Beautify file with html-beautify and only if major mode is web-mode"
;;   (interactive)
;;   (when (eq major-mode 'web-mode)
;;     (message "html-beautify taking care of your markup" (buffer-file-name))
;;     (shell-command (concat "html-beautify --quiet --replace -s 2 -w 120 -A \"auto\" -I -E \"\" --max-preserve-newlines 0 -f " (buffer-file-name)))
;;     (revert-buffer t t)))
;; ;;;###autoload
;; (defun prettier-stylelint-fix-file-and-revert ()
;;   "Prettify current file and apply autofixes only in css-mode"
;;   (interactive)
;;   (when (or (eq major-mode 'css-mode) (eq major-mode 'scss-mode))
;;     (message "prettier-stylelint fixing the file" (buffer-file-name))
;;     (shell-command (concat "prettier-stylelint --quiet --write " (buffer-file-name)))
;;     (revert-buffer t t)))
;; ;;;###autoload
;; (defun aj/update-my-doom-theme ()
;;   "Update my Doom theme. I should not this this way, but..."
;;   (interactive)
;;   (progn
;;     (byte-compile-file "/tmp/doom-breeze-theme.el")
;;     (shell-command "cd /tmp/ && cp doom-breeze* ~/.emacs.d/.local/packages/elpa/doom-themes*")
;;     (shell-command "ls ~/.emacs.d/.local/packages/elpa/doom-themes*")
;;     )
;;   )
;; ;;;###autoload
;; (defun counsel-yank-bash-history ()
;;   "Yank the bash history"
;;   (interactive)
;;   (let (hist-cmd collection val)
;;     (shell-command "history -r") ; reload history
;;     (setq collection
;;           (nreverse
;;            (split-string (with-temp-buffer (insert-file-contents (file-truename "~/.bash_history"))
;;                                            (buffer-string))
;;                          "\n"
;;                          t)))
;;     (when (and collection (> (length collection) 0)
;;                (setq val (if (= 1 (length collection)) (car collection)
;;                            (ivy-read (format "Bash history:") collection))))
;;       (kill-new val)
;;       (message "%s => kill-ring" val))))
;; ;;;###autoload
;; (defun aj/my-backup ()
;;   "Execute shell script for backup"
;;   (interactive)
;;   (progn
;;     (shell-command "backup-org.sh")
;;     ))
;; ;;;###autoload
;; (defun aj/insert-file-octals-identify-into-src-block-header ()
;;   "For file under the point it inserts its file permission in octal format at the end of the current line"
;;   (interactive)
;;   (let* (($inputStr (if (use-region-p)
;;                         (buffer-substring-no-properties (region-beginning) (region-end))))
;;          ($path
;;           (replace-regexp-in-string
;;            "^sudo::" "" $inputStr)))
;;     (progn
;;       (end-of-line)
;;       (if (file-exists-p $path)
;;           (insert (concat " :tangle-mode (identity #o" (replace-regexp-in-string "\n" ""(shell-command-to-string (concat "stat -c %a " $path))) ")" ))
;;         (print "file doesn't exists")))))
;; ;;;###autoload
;; (defun aj/go-to-per-project-bookmark()
;;   "First it updates bookmark file location to project-specific and then calls counsel on it"
;;   (interactive)
;;   (let ((bookmark-default-file (concat (projectile-project-name) "/bookmarks")))
;;     (counsel-bookmark)))
;; 
;; ;;;###autoload
;;                                         ; TODO: replace "link: " with actual domain name - useful for hyper links with titles
;; (defun gk-browse-url (&rest args)
;;   "Prompt for whether or not to browse with EWW, if no browse
;; with external browser."
;;   (apply
;;    (if (y-or-n-p (concat "link: " "Browse with EWW? "))
;;        'eww-browse-url
;;      #'browse-url-xdg-open)
;;    args))
;; 
;; ;;;###autoload
;; (defun aj/jump-to-org-dir ()
;;   "Jumps to org directory"
;;   (interactive)
;;   (let ((default-directory "~/org/"))
;;     (counsel-find-file)))
;; 
;; ;;;###autoload
;; (defun counsel-projectile-bookmark ()
;;   "Forward to `bookmark-jump' or `bookmark-set' if bookmark doesn't exist."
;;   (interactive)
;;   (require 'bookmark)
;;   (let ((projectile-bookmarks (projectile-bookmarks)))
;;     (ivy-read "Create or jump to bookmark: "
;;               projectile-bookmarks
;;               :action (lambda (x)
;;                         (cond ((and counsel-bookmark-avoid-dired
;;                                     (member x projectile-bookmarks)
;;                                     (file-directory-p (bookmark-location x)))
;;                                (with-ivy-window
;;                                  (let ((default-directory (bookmark-location x)))
;;                                    (counsel-find-file))))
;;                               ((member x projectile-bookmarks)
;;                                (with-ivy-window
;;                                  (bookmark-jump x)))
;;                               (t
;;                                (bookmark-set x))))
;;               :caller 'counsel-projectile-bookmark)))
;; 
;; 
;; ;;;###autoload
;; (defun projectile-bookmarks ()
;;   (let ((bmarks (bookmark-all-names)))
;;     (cl-remove-if-not #'workspace-bookmark-p bmarks)))
;; 
;; ;;;###autoload
;; (defun workspace-bookmark-p (bmark)
;;   (let ((bmark-path (expand-file-name (bookmark-location bmark))))
;;     (string-prefix-p (bmacs-project-root) bmark-path)))
;; 
;; ;;;###autoload
;; (defun bmacs-project-root ()
;;   "Get the path to the root of your project.
;; If STRICT-P, return nil if no project was found, otherwise return
;; `default-directory'."
;;   (let (projectile-require-project-root)
;;     (projectile-project-root)))
;; ;;;###autoload
;; (defun browse-webster-at-point ()
;;   (interactive)
;;   (browse-url (concat "https://www.merriam-webster.com/dictionary/" (thing-at-point 'word))))
;; ;;;###autoload
;; (defun browse-dictionary-at-point ()
;;   (interactive)
;;   (browse-url (concat "https://dictionary.com/browse/" (thing-at-point 'word))))
;; 
;; ;;;###autoload
;; (defun ivy-yasnippet--copy-edit-snippet-action (template-name)
;;   (let ((inhibit-read-only t))
;;     (ivy-yasnippet--revert))
;;   (yas-new-snippet)
;;   (erase-buffer)
;;   (insert-file-contents
;;    (yas--template-get-file
;;     (ivy-yasnippet--lookup-template template-name))
;;    nil 0 500))
;; 
;; ;;;###autoload
;; (defun aj/new-project-init-and-register (fp gitlab project)
;;   (call-process-shell-command (concat "cd " fp " && " "git init"))
;;   (if (string-equal "yes" gitlab)
;;       (progn
;;         (call-process-shell-command (concat "lab project create " project))
;;         (call-process-shell-command (concat "cd " fp " && " "git remote rename origin old-origin"))
;;         (call-process-shell-command (concat "cd " fp " && " "git remote add origin git@gitlab.com:AloisJanicek/" project ".git"))
;;         (call-process-shell-command (concat "cd " fp " && " "git push -u origin --all"))
;;         (call-process-shell-command (concat "cd " fp " && " "git push -u origin --tags"))))
;;   (aj/projectile-add-known-project-and-save fp)
;;   (projectile-switch-project-by-name fp))
;; 
;; ;;;###autoload
;; (defun aj/project-bootstrap ()
;;   (interactive)
;;   (let* ((project (read-string "New project name: "))
;;          (directory (read-directory-name "Directory: " "~/repos/"))
;;          (template (ivy-read "Template: " '("web-starter-kit" "other")))
;;          (gitlab (ivy-read "Gitlab?:" '("yes" "no")))
;;          (full-path (concat directory project))
;;          )
;;     ;; create directory
;;     (make-directory full-path)
;; 
;;     (if (string-equal template "web-starter-kit")
;;         (progn
;;           (call-process-shell-command (concat "git clone git@gitlab.com:AloisJanicek/web-starter-kit.git " full-path))
;;           (delete-directory (concat full-path "/.git/") t)
;;           (aj/new-project-init-and-register full-path gitlab project)
;;           )
;;       (aj/new-project-init-and-register full-path gitlab project))))
;; 
;; ;; TODO
;; ;;;###autoload
;; (defun aj/visualize-brain-and-take-care-of-buffers ()
;;   "Visualize all brain org files and them hide them from perspectives"
;;   (interactive)
;;   (let ((persp-autokill-buffer-on-remove nil))
;;     (call-interactively 'org-brain-visualize)
;;     (persp-remove-buffer persp-blacklist)))
;; 
;; ;; TODO
;; ;;;###autoload
;; (defun aj/browse-brain-files ()
;;     "browse brain files and bring selected one to the current perspective")
#+END_SRC
* Feature
** Snippets
Add personal snippets to yasnippet
#+BEGIN_SRC emacs-lisp
(after! yasnippet
  (push "~/.doom.d/snippets" yas-snippet-dirs))
#+END_SRC
** Which-Key
#+BEGIN_SRC emacs-lisp
(setq which-key-idle-delay 0.8
      which-key-allow-regexps nil
      which-key-allow-evil-operators 1)
#+END_SRC
* Completion
* UI
* Emacs
** Scratch Buffer
Inherit major mode from latest active buffer
#+BEGIN_SRC emacs-lisp
(setq doom-scratch-buffer-major-mode t)
#+END_SRC
* Tools
** Magit
#+BEGIN_SRC emacs-lisp
(setq +magit-hub-features t ;; I want the PR/issue stuff too!
      +magit-hub-enable-by-default t)  ;; And I want it on by default!

(after! magit
  (magit-wip-after-save-mode 1)
  (magit-wip-after-apply-mode 1)
  (setq magit-save-repository-buffers 'dontask
        magit-repository-directories '("~/dev/" "~/work/code/"))

  (advice-add 'magit-list-repositories :override #'*magit-list-repositories)
  (set-evil-initial-state! 'magit-repolist-mode 'normal))

(after! magithub
  (setq magithub-clone-default-directory "~/work/code/"))

(def-package! magit-todos)
#+END_SRC
* Languages
** JavaScript
*** JS Doc
#+BEGIN_SRC emacs-lisp
(def-package! js-doc
  :bind (:map js2-mode-map
           ("C-c i" . js-doc-insert-function-doc)
           ("@" . js-doc-insert-tag))
  :config
  (setq js-doc-mail-address "brandon@uptrend.tech"
         js-doc-author (format "Brandon Orther <%s>" js-doc-mail-address)
         js-doc-url "uptrend.tech"
         js-doc-license "MIT License"))
#+END_SRC
*** Tide
#+BEGIN_SRC emacs-lisp
(after! tide
  (setq tide-completion-detailed nil
        tide-always-show-documentation nil))


#+END_SRC
*** Flycheck Jest
#+BEGIN_SRC emacs-lisp
;; (after! flycheck
;;   (flycheck-jest-setup)
;;   (flycheck-add-mode 'jest 'js2-mode))
#+END_SRC
*** Code Coverage Overlays
#+BEGIN_SRC emacs-lisp
(setq coverlay:untested-line-background-color (doom-blend 'red 'bg 0.3)
      coverlay:tested-line-background-color (doom-blend 'green 'bg 0.0))
#+END_SRC
*** Jest (Mocha)
#+BEGIN_SRC emacs-lisp
(setq mocha-which-node "/Users/brandon/.nvm/versions/node/v10.5.0/bin/node")
(load! "local/jest")
(after! mocha
  (set-popup-rule! "^\\*mocha tests*"
                   :side 'right
                   :size 80
                   :select nil
                   :quit nil
                   :ttl t))

* Org Mode
#+BEGIN_SRC emacs-lisp
;; (setq
;; +org-dir (expand-file-name "~/Dropbox/org-files/")
;;    +org-attach-dir ".attach/"
;;    org-export-directory "export/"
;;    org-crypt-tag-matcher "+crypt-nocrypt")
;; 
;; ;; ;; local elisp files which refused to be installed with quelpa
;; ;; (after! org-protocol  (load! "local/org-protocol-capture-html/org-protocol-capture-html.el"))
;; 
;; ;; ;; load additional org-modules
;; ;; (add-hook 'org-load-hook '(lambda () (setq org-modules (append '(org-man org-eww org-protocol org-habit) org-modules))))
;; 
;; (after! org
;;   (add-hook 'org-capture-mode-hook 'flyspell-mode)
;;   ;; clock persistence
;;   (org-clock-persistence-insinuate)
;; 
;;   ;; open all pdf links with org-pfdview
;;   (add-to-list 'org-file-apps
;;                '("\\.pdf\\'" . (lambda (file link)
;;                                  (org-pdfview-open link))))
;;   (quiet!
;;    ;; register pdfview link type (copied from org-pdfview.el so I can lazy load)
;;    (org-link-set-parameters "pdfview"
;;                             :follow #'org-pdfview-open
;;                             :complete #'org-pdfview-complete-link
;;                             :store #'org-pdfview-store-link)
;;    (org-add-link-type "pdfview" 'org-pdfview-open)
;;    (add-hook 'org-store-link-functions 'org-pdfview-store-link)
;; 
;;    ;; ;; ...and same thing for org-ebook
;;    ;; (org-link-set-parameters "ebook"
;;    ;;                          :follow #'org-ebook-open
;;    ;;                          :store #'org-ebook-store-link)
;;    ;; (org-add-link-type "ebook" 'org-ebook-open)
;;    ;; (add-hook 'org-store-link-functions 'org-ebook-store-link)
;;    )
;; 
;; 
;; ;;   (setq
;; ;;    org-capture-templates '(("p" "Protocol" entry (file "~/Dropbox/org-files/BOOKMARKS.org")
;; ;;                             "**** [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]] :link:quote:\n%u\n#+BEGIN_QUOTE\n%i\n#+END_QUOTE\n"
;; ;;                             :immediate-finish t :prepend t)
;; ;; 
;; ;;                            ("L" "Protocol Link" entry (file "~/Dropbox/org-files/BOOKMARKS.org")
;; ;;                             "**** [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]] :link:\n%u"
;; ;;                             :immediate-finish t :prepend t)
;; ;; 
;; ;;                            ("w" "Website" entry (file "~/Dropbox/org-files/WEBSITES.org")
;; ;;                             "* %c :website:\n\n%U %?\n\n%:initial" :immediate-finish t)
;; ;; 
;; ;;                            ("e" "journal Entry" entry (file+olp+datetree "~/Dropbox/org-files/JOURNAL.org")
;; ;;                             "**** %?" :tree-type week)
;; ;; 
;; ;;                            ("t" "task" entry (file+headline "~/Dropbox/org-files/GTD.org" "TASKS")
;; ;;                             "* [ ] %?" :prepend t)
;; ;; 
;; ;;                            ("P" "Projectile" entry
;; ;;                             (function aj/find-and-open-org-projectile-file)
;; ;;                             "* [ ] %?" :prepend t)
;; ;; 
;; ;;                            )
;; 
;; ;;    org-agenda-custom-commands
;; ;;    ' (("P" "Projects" ((tags "+LEVEL=2+CATEGORY=\"PROJECTS\"
;; ;;                               |+LEVEL=3+CATEGORY=\"PROJECTS\"
;; ;;                               |+LEVEL=4+CATEGORY=\"PROJECTS\"/!+STARTED|+NEXT"))
;; ;;        ((org-agenda-overriding-header "Projects Overview")
;; ;;         (org-agenda-files '("~/Dropbox/org-files/GTD.org"))
;; ;;         (org-agenda-dim-blocked-tasks nil)
;; ;;         ))
;; ;; 
;; ;;       ("C" "Current project" ((tags "+LEVEL=1+CATEGORY=\"TASKS\"
;; ;;                                     |+LEVEL=2+CATEGORY=\"TASKS\""))
;; ;;        ((org-agenda-files (aj/return-project-org-file))
;; ;;         (org-agenda-overriding-header (aj/return-short-project-name))
;; ;;         ))
;; ;;       ("T" "Tasks" ((tags "+LEVEL=1+CATEGORY=\"TASKS\"
;; ;;                           |+LEVEL=2+CATEGORY=\"TASKS\""))
;; ;;        ((org-agenda-overriding-header "Tasks Overview")
;; ;;         (org-agenda-files '("~/Dropbox/org-files/GTD.org"))
;; ;;         ))
;; ;;       )
;; ;;    org-agenda-files '("~/Dropbox/org-files/GTD.org")
;; ;;    org-agenda-prefix-format '((agenda  . "  %-12s%6t ")
;; ;;                               (timeline  . "%s ")
;; ;;                               (todo  . "     Effort: %6e  ")
;; ;;                               (tags  . "%l")
;; ;;                               (search . "%l"))
;; ;;    org-agenda-todo-list-sublevels t
;; ;;    org-agenda-log-mode-items '(closed clock state)
;; ;;    org-agenda-span 2
;; ;;    org-agenda-start-on-weekday nil
;; ;;    org-agenda-start-with-log-mode nil
;; ;;    org-agenda-start-day "1d"
;; ;;    org-agenda-compact-blocks t
;; ;;    org-agenda-dim-blocked-tasks 'invisible
;; ;;    org-tags-match-list-sublevels 'indented
;; ;;    org-agenda-tags-column 68
;; ;;    org-agenda-category-icon-alist
;; ;;    `(("GTD" ,(list (all-the-icons-faicon "cogs")) nil nil :ascent center))
;; ;;    org-show-context-detail '((agenda .minimal)
;; ;;                              (bookmark-jump . minimal)
;; ;;                              (isearch . lineage)
;; ;;                              (default . minimal)
;; ;;                              )
;; ;;    org-link-frame-setup '((vm . vm-visit-folder-other-frame)
;; ;;                           (vm-imap . vm-visit-imap-folder-other-frame)
;; ;;                           (gnus . org-gnus-no-new-news)
;; ;;                           (file . find-file-other-window)
;; ;;                           (wl . wl-other-frame))
;;    org-todo-keywords
;;    ;;           todo     ongoing  hold         zap      done
;;    '((sequence "[ ](t)" "[-](o)" "[!](h)" "|" "[✘](z)" "[✔](d)")
;;      (sequnece "STARTED(s)" "|" "FINISHED(f)")
;;      (sequence "MAYBE(M)" "SOMEDAY(S)" "TODO(T)" "NEXT(n)" "WAITING(w)" "LATER(l)" "|" "DONE(D)" "CANCELLED(c)"))
;;    org-todo-keyword-faces '(("NEXT" . "#98be65") ("WAITING" . "#c678dd") ("TODO" . "#ECBE7B") ("STARTED" . "#4db5bd"))
;;    org-enforce-todo-dependencies t
;;    org-enforce-todo-checkbox-dependencies nil
;;    org-provide-todo-statistics t
;;    org-checkbox-hierarchical-statistics nil
;;    org-hierarchical-todo-statistics nil
;; 
;; ;;    org-startup-with-inline-images t
;; ;;    org-hide-emphasis-markers nil
;; ;;    org-fontify-whole-heading-line nil
;; ;;    org-src-fontify-natively t
;; 
;;    org-refile-targets '((org-agenda-files :maxlevel . 5))
;;    org-refile-use-outline-path 'file
;;    org-outline-path-complete-in-steps nil
;; 
;;    org-id-track-globally t
;;    org-id-locations-file (concat +org-dir ".org-ids-locations")
;;    org-use-property-inheritance t
;; 
;;    org-log-done 'time
;;    org-log-redeadline 'time
;;    org-log-reschedule 'time
;;    org-log-into-drawer "LOGBOOK"
;; 
;;    org-columns-default-format "%50ITEM(Task) %10CLOCKSUM %16TIMESTAMP_IA"
;;    org-drawers (quote ("PROPERTIES" "LOGBOOK"))
;; 
;;    org-clock-auto-clock-resolution (quote when-no-clock-is-running)
;;    org-clock-report-include-clocking-task t
;;    org-clock-out-remove-zero-time-clocks t
;;    org-clock-persist-query-resume nil
;;    org-clock-history-length 23
;;    org-clock-out-when-done t
;;    org-clock-into-drawer t
;;    org-clock-in-resume t
;;    org-clock-persist t
;; 
;;    evil-org-key-theme '(textobjects insert navigation additional shift heading)
;; 
;;    )
;; 

;;  ;; hooks
;;  (add-hook 'org-after-todo-state-change-hook 'org-save-all-org-buffers)
;;  (add-hook 'org-agenda-after-show-hook 'org-narrow-to-subtree)
;;  (add-hook 'org-mode-hook #'visual-line-mode)
;;  ;; (add-hook 'org-after-todo-statistics-hook 'org-summary-todo)
;;  (remove-hook 'org-agenda-finalize-hook '+org|cleanup-agenda-files)
;;  (remove-hook 'org-mode-hook #'auto-fill-mode)
;;
;;
;;  ;; faces
;;  (add-hook 'doom-load-theme-hook #'aj/my-org-faces)
;;  (add-hook! :append 'org-mode-hook #'aj/my-org-faces)
;;
;;  ;; advices
;;  (advice-add 'org-archive-subtree :after #'org-save-all-org-buffers)
;;  (advice-add 'org-archive-subtree-default :after #'org-save-all-org-buffers)
;;  (advice-add 'org-agenda-archive :after #'org-save-all-org-buffers)
;;  (advice-add 'org-agenda-archive-default :after #'org-save-all-org-buffers)
;;  (advice-add 'org-agenda-exit :before 'org-save-all-org-buffers)
;;  (advice-add 'org-refile :after (lambda (&rest _) (org-save-all-org-buffers)))
;;  (advice-add 'org-agenda-switch-to :after 'turn-off-solaire-mode)
;;  (advice-add 'org-clock-in :around (lambda (&rest _) (org-save-all-org-buffers)))
;;  (advice-add 'org-clock-out :around (lambda (&rest _) (org-save-all-org-buffers)))
;;
;;  ;; popups
;;  (set-popup-rule! "^\\*org-brain\\*$"    :size 0.3 :side 'left :vslot -2 :select t :quit nil :transient t)
;;  (set-popup-rule! "^CAPTURE.*\\.org$"    :size 0.4 :side 'bottom :select t)
;;  (set-popup-rule! "GTD.org"              :size 0.32 :side 'right :vslot -1  :select t :transient nil)
;;  (set-popup-rule! "README.org"           :size 0.4 :side 'left :select t :transient nil)
;;  ;; (set-popup-rule! "work-wiki.org"        :size 0.4 :side 'left :select t :transient nil)
;;  ;; (set-popup-rule! "build-wiki.org"       :size 0.4 :side 'left :select t :transient nil)
;;  ;; (set-popup-rule! "private-wiki.org"     :size 0.4 :side 'left :select t :transient nil)
;;  ;; (set-popup-rule! "environment-wiki.org" :size 0.4 :side 'left :select t :transient nil)
;;  ;; (set-popup-rule! "education-wiki.org"   :size 0.4 :side 'left :select t :transient nil)
;;  (set-popup-rule! "^\\*Org Src"          :size 0.4 :side 'right :quit t :select t)
;;  (set-popup-rule! "^\\*Org Agenda.*\\*$" :size 0.32 :side 'right :slot -1 :select t :modeline nil :quit t)
;;  (set-popup-rule! "JOURNAL.org"          :size 0.4 :side 'top :select t :transient nil)
;;  (set-popup-rule! "SOMEDAY.org"          :size 0.4 :side 'right :select t :transient nil)
;;  (set-popup-rule! "MAYBE.org"            :size 0.4 :side 'right :select t :transient nil)
;;  (set-popup-rule! "BOOKMARKS.org"        :size 0.4 :side 'top :select t :transient nil)
;;
;;  )
;;(after! ob-core
;;  (setq
;;   org-babel-default-header-args '((:session . "none")
;;                                   (:results . "replace")
;;                                   (:exports . "code")
;;                                   (:cache . "no")
;;                                   (:noweb . "no")
;;                                   (:hlines . "no")
;;                                   (:tangle . "no")
;;                                   (:mkdir . "yes"))
;;   )
;;  )
;;
;;;; packages
;;(def-package! org-brain
;;  :after org
;;  :init
;;  (set-evil-initial-state! 'org-brain-visualize-mode 'emacs)
;;  :config
;;  (setq org-brain-visualize-default-choices 'all
;;        org-brain-title-max-length 12 )
;;  :commands
;;  (org-brain-visualize
;;   org-brain-goto-end
;;   org-brain-visualize
;;   org-brain-add-parent
;;   org-brain-add-child
;;   org-brain-add-friendship
;;   org-brain-add-relationship
;;   org-brain-add-resource
;;   org-brain-goto-parent
;;   org-brain-goto-child
;;   org-brain-goto-friend
;;   org-brain-goto-current
;;   org-brain-goto-end
;;   org-brain-goto-other-window
;;   org-brain-remove-child
;;   org-brain-remove-friendship
;;   org-brain-remove-parent
;;   ))
;;(def-package! org-pdfview
;;  :commands (org-pdfview-open org-pdfview-store-link org-pdfview-complete-link org-pdfview-export)
;;  )
;;
;;(def-package! org-pomodoro
;;  :after org
;;  :commands (org-pomodoro org-pomodoro-remaining-seconds org-pomodoro-state)
;;  :config
;;  (setq alert-user-configuration (quote ((((:category . "org-pomodoro")) libnotify nil)))
;;        org-pomodoro-ask-upon-killing nil
;;        )
;;  )
;; (def-package! org-projectile
;;   :after org
;;   :commands (org-projectile-todo-files org-projectile-capture-for-current-project)
;;   :init (setq org-projectile-per-project-filepath "README.org"
;;               org-projectile-capture-template (format "%s%s" "* TODO %?" :clock-in t)
;;               ;; org-agenda-files (append (list
;;               ;;                           ""
;;               ;;                           ))
;;               )
;;   :config (org-projectile-per-project)
;;   )

;; (def-package! ereader
;;   :mode ("\\.epub\\'". ereader-mode)
;;   :init (add-to-list 'doom-large-file-modes-list 'ereader-mode)
;;   :commands (ereader-read-epub ereader-mode)
;;   )
;; (def-package! org-ebook
;;   :commands (org-ebook-open org-ebook-store-link)
;;   )
;; (def-package! ob-javascript
;;   :after ob-core)
#+END_SRC
* Apps
** Write
*** langtool
#+BEGIN_SRC emacs-lisp
(setq langtool-language-tool-jar "/usr/local/Cellar/languagetool/4.1/libexec/languagetool-commandline.jar")
#+END_SRC

# * REFERENCE Config
# ** Languages
# *** Org-mode
# #+BEGIN_SRC emacs-lisp

# #+END_SRC

# Quickly insert a =emacs-lisp= src block
# #+BEGIN_SRC emacs-lisp
# *** ;; (add-to-list 'org-structure-template-alist
# ;;              '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
# #+END_SRC
# Bind capture to =C-c c=
# #+BEGIN_SRC emacs-lisp
# (define-key global-map "\C-cc" 'org-capture)
# #+END_SRC
# Start in insert mode in =org-capture=
# #+BEGIN_SRC emacs-lisp
# (add-hook 'org-capture-mode-hook 'evil-insert-state)
# #+END_SRC
# #+BEGIN_SRC emacs-lisp
# (after! org
#   (setq org-directory "~/Dropbox/orgfiles")

#   (defun org-file-path (filename)
#     "Return the absolute address of an org file, given its relative name."
#     (concat (file-name-as-directory org-directory) filename))
#     (setq org-index-file (org-file-path "i.org"))
#     (setq org-archive-location
#         (concat (org-file-path "archive.org") "::* From %s"))

#     (setq org-agenda-files (list "~/Dropbox/orgfiles/gcal.org"
#                                 "~/Dropbox/orgfiles/i.org"
#                                 "~/Dropbox/orgfiles/Lab_Notebook.org"
#                                 "~/Dropbox/orgfiles/Lab_schedule.org"
#                                 "~/Dropbox/orgfiles/schedule.org"))

#     ;; Set Bullets to OG
#     (setq org-bullets-bullet-list '("■" "◆" "▲" "▶"))
#     (setq org-ellipsis " ▼ ")
#     (setq org-export-with-toc nil)
#     ;; Log when things are done
#     (setq org-log-done 'time)

#   (setq org-capture-templates
#     '(("a" "Appointment" entry
#        (file  "~/Dropbox/orgfiles/gcal.org" "Appointments")
#        "* TODO %?\n:PROPERTIES:\n\n:END:\nDEADLINE: %^T \n %i\n")

#       ("n" "Note" entry
#        (file+headline "~/Dropbox/orgfiles/i.org" "Notes")
#        "** %?\n%T")

#       ("l" "Link" entry
#        (file+headline "~/Dropbox/orgfiles/links.org" "Links")
#        "* %? %^L %^g \n%T" :prepend t)

#       ("t" "To Do Item" entry
#        (file+headline "~/Dropbox/orgfiles/i.org" "Unsorted")
#        "*** TODO %?\n%T" :prepend t)

#       ("j" "Lab Entry" entry
#        (file+olp+datetree "~/Dropbox/orgfiles/Lab_Notebook.org" "Lab Journal")
#        "** %? %^g \n\n")

#       ("d" "Lab To Do" entry
#        (file+headline "~/Dropbox/orgfiles/Lab_Notebook.org" "To Do")
#        "** TODO %?\n%T" :prepend t)

#       ("o" "Work To Do" entry
#        (file+headline "~/Dropbox/orgfiles/o.org" "Unsorted")
#        "** TODO %?\n%T" :prepend t))))
# #+END_SRC
# *** Shell
# Fix Flycheck for shellscripts
# #+BEGIN_SRC emacs-lisp
# ;; (setq flycheck-shellcheck-follow-sources nil)
# #+END_SRC
# ** Modules
# *** Dired all-the-icons
# #+BEGIN_SRC emacs-lisp
# ;; Shows the wrong faces
# ;; (def-package! all-the-icons-dired
# ;;   :hook (dired-mode . all-the-icons-dired-mode))
# #+END_SRC
# *** Docker
# #+BEGIN_SRC emacs-lisp
# (def-package! docker)
# #+END_SRC
# *** Edit-server
# #+BEGIN_SRC emacs-lisp
# (def-package! edit-server
# 		:config
# 				(edit-server-start))
# #+END_SRC
# *** Ivy-yasnippet
# #+BEGIN_SRC emacs-lisp
# (def-package! ivy-yasnippet
#   :commands (ivy-yasnippet)
#   :config
#     (map!
#      (:leader
#        (:prefix "s"
#          :desc "Ivy-yasnippet" :n "y" #'ivy-yasnippet))))
# #+END_SRC
# *** Org-pomodoro
# #+BEGIN_SRC emacs-lisp
# (def-package! org-pomodoro)
# #+END_SRC
# *** Org-noter
# #+BEGIN_SRC emacs-lisp
# (def-package! org-noter
#   :config
#   (map!
#    (:leader
#      (:prefix "n"
#    :desc "Org-noter-insert" :n "i" #'org-noter-insert-note))))
# #+END_SRC
# *** PDF-Tools
# #+BEGIN_SRC emacs-lisp
# (def-package! pdf-tools
#   :preface
#   (setq pdf-view-use-unicode-ligther nil)
#   :config
#   (map! (:map (pdf-view-mode-map)
#           :n doom-leader-key nil))
#   (set! :popup "\\*Outline " '((side . left) (size . 30)) '((quit . t)))
#   (setq-default pdf-view-display-size 'fit-page
#                 pdf-view-midnight-colors `(,(doom-color 'fg) . ,(doom-color 'bg)))
#   ;; turn off cua so copy works
#   (add-hook 'pdf-view-mode-hook
#             (lambda ()
#               (set (make-local-variable 'evil-normal-state-cursor) (list nil)))))
# #+END_SRC

# #+RESULTS:
# : #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (23335 24329 785159 0) :init (23335 24329 785139 0) :init-secs (0 7 258146 0) :use-package-secs (0 7 258190 0) :preface (23335 24329 785150 0) :config (23335 24329 784841 0) :config-secs (0 0 1538 0) :preface-secs (0 7 258172 0)))

# *** Solidity-mode
# #+BEGIN_SRC emacs-lisp
# ;; (set! solidity-solc-path "~/.node_modules/lib/node_modules/solc/solcjs")
# ;; (set! solidity-solium-path "~/.node_modules/lib/node_modules/solium/bin/solium.js")
# #+END_SRC
# *** Wakatime
# #+BEGIN_SRC emacs-lisp
# (setq wakatime-api-key "ef95a313-1eb0-4b87-b170-875f27ac9d25")
# #+END_SRC

