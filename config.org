#+TITLE: DOOM Emacs Private Config
#+AUTHOR: Brandon Orther

* Basics
** Files and directory variables
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/Dropbox/org-files/"
      org-brain-path "~/Dropbox/org-files/brain/"
      +org-attach-dir "./attach/"
      +file-templates-dir "~/Dropbox/org-files/templates")

;; Wiki files locations
(defvar +GTD "~/Dropbox/org-files/GTD.org"
  "File where things must be done.")
(defvar +SOMEDAY "~/Dropbox/org-files/SOMEDAY.org"
  "File of things that someday will be done.")
(defvar +MAYBE "~/Dropbox/org-files/MAYBE.org"
  "File of wild possibilities.")
(defvar +JOURNAL "~/Dropbox/org-files/JOURNAL.org"
  "File where things are logged.")
(defvar +BOOKMARKS "~/Dropbox/org-files/BOOKMARKS.org"
  "Jungle of links.")
(defvar +private-wiki "~/Dropbox/org-files/private-wiki.org"
  "File where my private wiki is.")
(defvar +work-wiki "~/Dropbox/org-files/work-wiki.org"
  "File where my work wiki is.")
(defvar +environment-wiki "~/Dropbox/org-files/environment-wiki.org"
  "File where my environment wiki is.")
(defvar +education-wiki "~/Dropbox/org-files/education-wiki.org"
  "File where my education wiki is.")
(defvar +build-wiki "~/Dropbox/org-files/build-wiki.org"
  "File where my build wiki is.")
#+END_SRC
** User Credentials
#+BEGIN_SRC emacs-lisp
(setq
    user-mail-address "brandon@uptrend.tech"
    user-full-name "Brandon Orther")
(setq auth-sources '("~/.authinfo.gpg"))
#+END_SRC
** UI
*** Start maximized
#+BEGIN_SRC emacs-lisp
;; start me maximized
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC
*** Fonts
#+BEGIN_SRC emacs-lisp
(setq ns-use-thin-smoothing t)
(setq doom-font (font-spec :family "Roboto Mono for Powerline" :size 12)
      doom-big-font (font-spec :family "Roboto Mono for Powerline" :size 18))
;; Dash highlighting
(after! dash (dash-enable-font-lock))
#+END_SRC
*** Modeline
#+BEGIN_SRC emacs-lisp
(setq doom-modeline-buffer-file-name-style 'truncate-upto-root)
#+END_SRC
*** Minibuffer
#+BEGIN_SRC emacs-lisp
(setq show-trailing-whitespace t)
(add-hook! minibuffer-setup (setq-local show-trailing-whitespace nil))
#+END_SRC
*** Icons
**** Ivy Icons
#+BEGIN_SRC emacs-lisp
(def-package! all-the-icons-ivy
  :after (ivy counsel)
  :init
  (setq all-the-icons-ivy-file-commands
        '(counsel-recentf
          counsel-find-file
          counsel-file-jump
          counsel-dired-jump
          counsel-projectile-find-file ;; not working
          counsel-projectile-find-dir))
  (setq all-the-icons-ivy-buffer-commands
        '(+ivy/switch-workspace-buffer))
  :config (all-the-icons-ivy-setup))
#+END_SRC
** Def Packages
#+BEGIN_SRC emacs-lisp
(def-package! highlight-blocks
  :commands (highlight-blocks-mode highlight-blocks-now))

(def-package! link-hint)

;; (def-package! plain-org-wiki
;;   :config
;;   (setq pow-directory "~/Dropbox/org-files/brain"))
#+END_SRC
* Keybindings
#+BEGIN_SRC emacs-lisp
;; (map!
;;  (:leader
;;    ;; (:prefix "o"
;;    ;;   :desc "Agenda" :n "a" #'org-agenda
;;    ;;   :desc "eShell" :n "e" #'+eshell/open-popup
;;    ;;   :desc "i.org" :n "o" #'emiller/visit-i-org
;;    ;;   :desc "APP: Email" :n "m" #'=mail)
;;    (:prefix "p"
;;      :desc "Counsel-ag" :n "f" #'counsel-ag
;;      :desc "Seach in project file" :n "i" #'+ivy/project-search)
;;    ;; (:prefix "g"
;;    ;;   :desc "Git Status" :n "g" #'magit-status
;;    ;;   :desc "List gists" :n "l" #'+gist:list)
;;    ;; (:prefix "n"
;;    ;;   :desc "Org-noter" :n "o" #'org-noter)
;;    ;; (:prefix "p"
;;    ;;   :desc "Org-pomodoro" :n "s" #'org-pomodoro)
;;   :desc "New workspace" :n "N" (lambda! () (+workspace/new (read-string "Enter workspace name: ")))))
#+END_SRC
* Feature
** Snippets
Add personal snippets to yasnippet
#+BEGIN_SRC emacs-lisp
;; (after! yasnippet
;;   (push "~/.doom.d/snippets" yas-snippet-dirs))
#+END_SRC
** Which-Key
#+BEGIN_SRC emacs-lisp
(setq which-key-idle-delay 0.8
      which-key-allow-regexps nil
      which-key-allow-evil-operators 1)
#+END_SRC
* Languages
** JavaScript
*** JS Doc
#+BEGIN_SRC emacs-lisp
(def-package! js-doc
  :bind (:map js2-mode-map
           ("C-c i" . js-doc-insert-function-doc)
           ("@" . js-doc-insert-tag))
  :config
  (setq js-doc-mail-address "brandon@uptrend.tech"
         js-doc-author (format "Brandon Orther <%s>" js-doc-mail-address)
         js-doc-url "uptrend.tech"
         js-doc-license "MIT License"))
#+END_SRC
*** Tide
#+BEGIN_SRC emacs-lisp
;; (after! tide
;;   (setq tide-completion-detailed nil
;;         tide-always-show-documentation nil))
#+END_SRC
*** Prettier
#+BEGIN_SRC emacs-lisp
(eval-after-load 'web-mode
    '(progn
       (add-hook 'web-mode-hook #'add-node-modules-path)
       (add-hook 'web-mode-hook #'prettier-js-mode)))
#+END_SRC

*** Flycheck Jest
#+BEGIN_SRC emacs-lisp
;; (after! flycheck
;;   (flycheck-jest-setup)
;;   (flycheck-add-mode 'jest 'js2-mode))
#+END_SRC
*** Code Coverage Overlays
#+BEGIN_SRC emacs-lisp
(setq coverlay:untested-line-background-color (doom-blend 'red 'bg 0.3)
      coverlay:tested-line-background-color (doom-blend 'green 'bg 0.0))
#+END_SRC
*** Jest (Mocha)
#+BEGIN_SRC emacs-lisp
(setq mocha-which-node "/Users/brandon/.nvm/versions/node/v10.5.3/bin/node")
(load! "local/jest")
(after! mocha
  (set-popup-rule! "^\\*mocha tests*"
                   :side 'right
                   :size 80
                   :select nil
                   :quit nil
                   :ttl t))
* Apps
** Write
*** langtool
#+BEGIN_SRC emacs-lisp
(setq langtool-language-tool-jar "/usr/local/Cellar/languagetool/4.1/libexec/languagetool-commandline.jar")
#+END_SRC

* Cheatsheet
#+BEGIN_SRC emacs-lisp
(cheatsheet-add-group 'Window 
                      '(:key "SPC w <" :description "Decrease window width")
                      '(:key "SPC w >" :description "Increase window width")
                      )
#+END_SRC


